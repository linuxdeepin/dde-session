/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-session/dbus/interface/org.freedesktop.login1.Session.xml -a ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.SessionAdaptor -i ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.Session.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.SessionAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SessionAdaptor
 */

SessionAdaptor::SessionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SessionAdaptor::~SessionAdaptor()
{
    // destructor
}

bool SessionAdaptor::active() const
{
    // get the value of property Active
    return qvariant_cast< bool >(parent()->property("Active"));
}

uint SessionAdaptor::audit() const
{
    // get the value of property Audit
    return qvariant_cast< uint >(parent()->property("Audit"));
}

QString SessionAdaptor::desktop() const
{
    // get the value of property Desktop
    return qvariant_cast< QString >(parent()->property("Desktop"));
}

QString SessionAdaptor::display() const
{
    // get the value of property Display
    return qvariant_cast< QString >(parent()->property("Display"));
}

QString SessionAdaptor::id() const
{
    // get the value of property Id
    return qvariant_cast< QString >(parent()->property("Id"));
}

bool SessionAdaptor::idleHint() const
{
    // get the value of property IdleHint
    return qvariant_cast< bool >(parent()->property("IdleHint"));
}

qulonglong SessionAdaptor::idleSinceHint() const
{
    // get the value of property IdleSinceHint
    return qvariant_cast< qulonglong >(parent()->property("IdleSinceHint"));
}

qulonglong SessionAdaptor::idleSinceHintMonotonic() const
{
    // get the value of property IdleSinceHintMonotonic
    return qvariant_cast< qulonglong >(parent()->property("IdleSinceHintMonotonic"));
}

uint SessionAdaptor::leader() const
{
    // get the value of property Leader
    return qvariant_cast< uint >(parent()->property("Leader"));
}

bool SessionAdaptor::lockedHint() const
{
    // get the value of property LockedHint
    return qvariant_cast< bool >(parent()->property("LockedHint"));
}

QString SessionAdaptor::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

bool SessionAdaptor::remote() const
{
    // get the value of property Remote
    return qvariant_cast< bool >(parent()->property("Remote"));
}

QString SessionAdaptor::remoteHost() const
{
    // get the value of property RemoteHost
    return qvariant_cast< QString >(parent()->property("RemoteHost"));
}

QString SessionAdaptor::remoteUser() const
{
    // get the value of property RemoteUser
    return qvariant_cast< QString >(parent()->property("RemoteUser"));
}

QString SessionAdaptor::scope() const
{
    // get the value of property Scope
    return qvariant_cast< QString >(parent()->property("Scope"));
}

QString SessionAdaptor::service() const
{
    // get the value of property Service
    return qvariant_cast< QString >(parent()->property("Service"));
}

QString SessionAdaptor::state() const
{
    // get the value of property State
    return qvariant_cast< QString >(parent()->property("State"));
}

QString SessionAdaptor::tTY() const
{
    // get the value of property TTY
    return qvariant_cast< QString >(parent()->property("TTY"));
}

qulonglong SessionAdaptor::timestamp() const
{
    // get the value of property Timestamp
    return qvariant_cast< qulonglong >(parent()->property("Timestamp"));
}

qulonglong SessionAdaptor::timestampMonotonic() const
{
    // get the value of property TimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("TimestampMonotonic"));
}

QString SessionAdaptor::type() const
{
    // get the value of property Type
    return qvariant_cast< QString >(parent()->property("Type"));
}

uint SessionAdaptor::vTNr() const
{
    // get the value of property VTNr
    return qvariant_cast< uint >(parent()->property("VTNr"));
}

void SessionAdaptor::Activate()
{
    // handle method call org.freedesktop.login1.Session.Activate
    QMetaObject::invokeMethod(parent(), "Activate");
}

void SessionAdaptor::Kill(const QString &in0, int in1)
{
    // handle method call org.freedesktop.login1.Session.Kill
    QMetaObject::invokeMethod(parent(), "Kill", Q_ARG(QString, in0), Q_ARG(int, in1));
}

void SessionAdaptor::Lock()
{
    // handle method call org.freedesktop.login1.Session.Lock
    QMetaObject::invokeMethod(parent(), "Lock");
}

void SessionAdaptor::PauseDeviceComplete(uint in0, uint in1)
{
    // handle method call org.freedesktop.login1.Session.PauseDeviceComplete
    QMetaObject::invokeMethod(parent(), "PauseDeviceComplete", Q_ARG(uint, in0), Q_ARG(uint, in1));
}

void SessionAdaptor::ReleaseControl()
{
    // handle method call org.freedesktop.login1.Session.ReleaseControl
    QMetaObject::invokeMethod(parent(), "ReleaseControl");
}

void SessionAdaptor::ReleaseDevice(uint in0, uint in1)
{
    // handle method call org.freedesktop.login1.Session.ReleaseDevice
    QMetaObject::invokeMethod(parent(), "ReleaseDevice", Q_ARG(uint, in0), Q_ARG(uint, in1));
}

void SessionAdaptor::SetIdleHint(bool in0)
{
    // handle method call org.freedesktop.login1.Session.SetIdleHint
    QMetaObject::invokeMethod(parent(), "SetIdleHint", Q_ARG(bool, in0));
}

void SessionAdaptor::SetLockedHint(bool in0)
{
    // handle method call org.freedesktop.login1.Session.SetLockedHint
    QMetaObject::invokeMethod(parent(), "SetLockedHint", Q_ARG(bool, in0));
}

void SessionAdaptor::TakeControl(bool in0)
{
    // handle method call org.freedesktop.login1.Session.TakeControl
    QMetaObject::invokeMethod(parent(), "TakeControl", Q_ARG(bool, in0));
}

QDBusUnixFileDescriptor SessionAdaptor::TakeDevice(uint in0, uint in1, bool &out1)
{
    // handle method call org.freedesktop.login1.Session.TakeDevice
    //return static_cast<YourObjectType *>(parent())->TakeDevice(in0, in1, out1);
}

void SessionAdaptor::Terminate()
{
    // handle method call org.freedesktop.login1.Session.Terminate
    QMetaObject::invokeMethod(parent(), "Terminate");
}

void SessionAdaptor::Unlock()
{
    // handle method call org.freedesktop.login1.Session.Unlock
    QMetaObject::invokeMethod(parent(), "Unlock");
}

