/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-session/dbus/interface/org.freedesktop.systemd1.Manager.xml -a ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.ManagerAdaptor -i ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.Manager.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ORG_FREEDESKTOP_SYSTEMD1_MANAGERADAPTOR_H
#define ORG_FREEDESKTOP_SYSTEMD1_MANAGERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.Manager.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.freedesktop.systemd1.Manager
 */
class ManagerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.systemd1.Manager")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.systemd1.Manager\">\n"
"    <property access=\"read\" type=\"s\" name=\"Version\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Features\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Virtualization\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Architecture\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Tainted\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"FirmwareTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"FirmwareTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"LoaderTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"LoaderTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"KernelTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"KernelTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UserspaceTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UserspaceTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"FinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"FinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"SecurityStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"SecurityStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"SecurityFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"SecurityFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"GeneratorsStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"GeneratorsStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"GeneratorsFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"GeneratorsFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UnitsLoadStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UnitsLoadStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UnitsLoadFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"UnitsLoadFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDSecurityStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDSecurityStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDSecurityFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDSecurityFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDGeneratorsStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDGeneratorsStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDGeneratorsFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDGeneratorsFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDUnitsLoadStartTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDUnitsLoadStartTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDUnitsLoadFinishTimestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"InitRDUnitsLoadFinishTimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"s\" name=\"LogLevel\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"s\" name=\"LogTarget\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"NNames\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"NFailedUnits\"/>\n"
"    <property access=\"read\" type=\"u\" name=\"NJobs\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"NInstalledJobs\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"NFailedJobs\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"d\" name=\"Progress\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"as\" name=\"Environment\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"ConfirmSpawn\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"ShowStatus\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"as\" name=\"UnitPath\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"DefaultStandardOutput\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"DefaultStandardError\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"t\" name=\"RuntimeWatchdogUSec\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"t\" name=\"ShutdownWatchdogUSec\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"ServiceWatchdogs\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"ControlGroup\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"SystemState\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"y\" name=\"ExitCode\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultTimerAccuracyUSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultTimeoutStartUSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultTimeoutStopUSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultRestartUSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultStartLimitIntervalUSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"DefaultStartLimitBurst\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"DefaultCPUAccounting\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"DefaultBlockIOAccounting\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"DefaultMemoryAccounting\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"DefaultTasksAccounting\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitCPU\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitCPUSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitFSIZE\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitFSIZESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitDATA\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitDATASoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitSTACK\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitSTACKSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitCORE\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitCORESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRSS\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRSSSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNOFILE\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNOFILESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitAS\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitASSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNPROC\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNPROCSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitMEMLOCK\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitMEMLOCKSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitLOCKS\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitLOCKSSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitSIGPENDING\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitSIGPENDINGSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitMSGQUEUE\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitMSGQUEUESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNICE\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitNICESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRTPRIO\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRTPRIOSoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRTTIME\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultLimitRTTIMESoft\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"DefaultTasksMax\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"TimerSlackNSec\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <method name=\"GetUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"GetUnitByPID\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"GetUnitByInvocationID\">\n"
"      <arg direction=\"in\" type=\"ay\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"GetUnitByControlGroup\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"LoadUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"StartUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"StartUnitReplace\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"StopUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"ReloadUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"RestartUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"TryRestartUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"ReloadOrRestartUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"ReloadOrTryRestartUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"KillUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"i\"/>\n"
"    </method>\n"
"    <method name=\"ResetFailedUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"RefUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"UnrefUnit\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"AbandonScope\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetJob\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"out\" type=\"o\"/>\n"
"    </method>\n"
"    <method name=\"Subscribe\"/>\n"
"    <method name=\"Unsubscribe\"/>\n"
"    <method name=\"Dump\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"DumpByFileDescriptor\">\n"
"      <arg direction=\"out\" type=\"h\"/>\n"
"    </method>\n"
"    <method name=\"Reload\"/>\n"
"    <method name=\"Reexecute\"/>\n"
"    <method name=\"Exit\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"Reboot\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"PowerOff\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"Halt\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"KExec\">\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"SwitchRoot\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <annotation value=\"true\" name=\"org.freedesktop.systemd1.Privileged\"/>\n"
"    </method>\n"
"    <method name=\"SetEnvironment\">\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"UnsetEnvironment\">\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"UnsetAndSetEnvironment\">\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"GetUnitFileState\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"MaskUnitFiles\">\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"      <arg direction=\"out\" type=\"a(sss)\"/>\n"
"      <annotation value=\"StringStructList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"UnmaskUnitFiles\">\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"      <arg direction=\"out\" type=\"a(sss)\"/>\n"
"      <annotation value=\"StringStructList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetUnitFileLinks\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"SetExitCode\">\n"
"      <arg direction=\"in\" type=\"y\"/>\n"
"    </method>\n"
"    <method name=\"LookupDynamicUserByName\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"LookupDynamicUserByUID\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <signal name=\"UnitNew\">\n"
"      <arg type=\"s\"/>\n"
"      <arg type=\"o\"/>\n"
"    </signal>\n"
"    <signal name=\"UnitRemoved\">\n"
"      <arg type=\"s\"/>\n"
"      <arg type=\"o\"/>\n"
"    </signal>\n"
"    <signal name=\"JobNew\">\n"
"      <arg type=\"u\"/>\n"
"      <arg type=\"o\"/>\n"
"      <arg type=\"s\"/>\n"
"    </signal>\n"
"    <signal name=\"JobRemoved\">\n"
"      <arg type=\"u\"/>\n"
"      <arg type=\"o\"/>\n"
"      <arg type=\"s\"/>\n"
"      <arg type=\"s\"/>\n"
"    </signal>\n"
"    <signal name=\"StartupFinished\">\n"
"      <arg type=\"t\"/>\n"
"      <arg type=\"t\"/>\n"
"      <arg type=\"t\"/>\n"
"      <arg type=\"t\"/>\n"
"      <arg type=\"t\"/>\n"
"      <arg type=\"t\"/>\n"
"    </signal>\n"
"    <signal name=\"UnitFilesChanged\"/>\n"
"    <signal name=\"Reloading\">\n"
"      <arg type=\"b\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    ManagerAdaptor(QObject *parent);
    virtual ~ManagerAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QString Architecture READ architecture)
    QString architecture() const;

    Q_PROPERTY(bool ConfirmSpawn READ confirmSpawn)
    bool confirmSpawn() const;

    Q_PROPERTY(QString ControlGroup READ controlGroup)
    QString controlGroup() const;

    Q_PROPERTY(bool DefaultBlockIOAccounting READ defaultBlockIOAccounting)
    bool defaultBlockIOAccounting() const;

    Q_PROPERTY(bool DefaultCPUAccounting READ defaultCPUAccounting)
    bool defaultCPUAccounting() const;

    Q_PROPERTY(qulonglong DefaultLimitAS READ defaultLimitAS)
    qulonglong defaultLimitAS() const;

    Q_PROPERTY(qulonglong DefaultLimitASSoft READ defaultLimitASSoft)
    qulonglong defaultLimitASSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitCORE READ defaultLimitCORE)
    qulonglong defaultLimitCORE() const;

    Q_PROPERTY(qulonglong DefaultLimitCORESoft READ defaultLimitCORESoft)
    qulonglong defaultLimitCORESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitCPU READ defaultLimitCPU)
    qulonglong defaultLimitCPU() const;

    Q_PROPERTY(qulonglong DefaultLimitCPUSoft READ defaultLimitCPUSoft)
    qulonglong defaultLimitCPUSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitDATA READ defaultLimitDATA)
    qulonglong defaultLimitDATA() const;

    Q_PROPERTY(qulonglong DefaultLimitDATASoft READ defaultLimitDATASoft)
    qulonglong defaultLimitDATASoft() const;

    Q_PROPERTY(qulonglong DefaultLimitFSIZE READ defaultLimitFSIZE)
    qulonglong defaultLimitFSIZE() const;

    Q_PROPERTY(qulonglong DefaultLimitFSIZESoft READ defaultLimitFSIZESoft)
    qulonglong defaultLimitFSIZESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitLOCKS READ defaultLimitLOCKS)
    qulonglong defaultLimitLOCKS() const;

    Q_PROPERTY(qulonglong DefaultLimitLOCKSSoft READ defaultLimitLOCKSSoft)
    qulonglong defaultLimitLOCKSSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitMEMLOCK READ defaultLimitMEMLOCK)
    qulonglong defaultLimitMEMLOCK() const;

    Q_PROPERTY(qulonglong DefaultLimitMEMLOCKSoft READ defaultLimitMEMLOCKSoft)
    qulonglong defaultLimitMEMLOCKSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitMSGQUEUE READ defaultLimitMSGQUEUE)
    qulonglong defaultLimitMSGQUEUE() const;

    Q_PROPERTY(qulonglong DefaultLimitMSGQUEUESoft READ defaultLimitMSGQUEUESoft)
    qulonglong defaultLimitMSGQUEUESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitNICE READ defaultLimitNICE)
    qulonglong defaultLimitNICE() const;

    Q_PROPERTY(qulonglong DefaultLimitNICESoft READ defaultLimitNICESoft)
    qulonglong defaultLimitNICESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitNOFILE READ defaultLimitNOFILE)
    qulonglong defaultLimitNOFILE() const;

    Q_PROPERTY(qulonglong DefaultLimitNOFILESoft READ defaultLimitNOFILESoft)
    qulonglong defaultLimitNOFILESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitNPROC READ defaultLimitNPROC)
    qulonglong defaultLimitNPROC() const;

    Q_PROPERTY(qulonglong DefaultLimitNPROCSoft READ defaultLimitNPROCSoft)
    qulonglong defaultLimitNPROCSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitRSS READ defaultLimitRSS)
    qulonglong defaultLimitRSS() const;

    Q_PROPERTY(qulonglong DefaultLimitRSSSoft READ defaultLimitRSSSoft)
    qulonglong defaultLimitRSSSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitRTPRIO READ defaultLimitRTPRIO)
    qulonglong defaultLimitRTPRIO() const;

    Q_PROPERTY(qulonglong DefaultLimitRTPRIOSoft READ defaultLimitRTPRIOSoft)
    qulonglong defaultLimitRTPRIOSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitRTTIME READ defaultLimitRTTIME)
    qulonglong defaultLimitRTTIME() const;

    Q_PROPERTY(qulonglong DefaultLimitRTTIMESoft READ defaultLimitRTTIMESoft)
    qulonglong defaultLimitRTTIMESoft() const;

    Q_PROPERTY(qulonglong DefaultLimitSIGPENDING READ defaultLimitSIGPENDING)
    qulonglong defaultLimitSIGPENDING() const;

    Q_PROPERTY(qulonglong DefaultLimitSIGPENDINGSoft READ defaultLimitSIGPENDINGSoft)
    qulonglong defaultLimitSIGPENDINGSoft() const;

    Q_PROPERTY(qulonglong DefaultLimitSTACK READ defaultLimitSTACK)
    qulonglong defaultLimitSTACK() const;

    Q_PROPERTY(qulonglong DefaultLimitSTACKSoft READ defaultLimitSTACKSoft)
    qulonglong defaultLimitSTACKSoft() const;

    Q_PROPERTY(bool DefaultMemoryAccounting READ defaultMemoryAccounting)
    bool defaultMemoryAccounting() const;

    Q_PROPERTY(qulonglong DefaultRestartUSec READ defaultRestartUSec)
    qulonglong defaultRestartUSec() const;

    Q_PROPERTY(QString DefaultStandardError READ defaultStandardError)
    QString defaultStandardError() const;

    Q_PROPERTY(QString DefaultStandardOutput READ defaultStandardOutput)
    QString defaultStandardOutput() const;

    Q_PROPERTY(uint DefaultStartLimitBurst READ defaultStartLimitBurst)
    uint defaultStartLimitBurst() const;

    Q_PROPERTY(qulonglong DefaultStartLimitIntervalUSec READ defaultStartLimitIntervalUSec)
    qulonglong defaultStartLimitIntervalUSec() const;

    Q_PROPERTY(bool DefaultTasksAccounting READ defaultTasksAccounting)
    bool defaultTasksAccounting() const;

    Q_PROPERTY(qulonglong DefaultTasksMax READ defaultTasksMax)
    qulonglong defaultTasksMax() const;

    Q_PROPERTY(qulonglong DefaultTimeoutStartUSec READ defaultTimeoutStartUSec)
    qulonglong defaultTimeoutStartUSec() const;

    Q_PROPERTY(qulonglong DefaultTimeoutStopUSec READ defaultTimeoutStopUSec)
    qulonglong defaultTimeoutStopUSec() const;

    Q_PROPERTY(qulonglong DefaultTimerAccuracyUSec READ defaultTimerAccuracyUSec)
    qulonglong defaultTimerAccuracyUSec() const;

    Q_PROPERTY(QStringList Environment READ environment)
    QStringList environment() const;

    Q_PROPERTY(uchar ExitCode READ exitCode)
    uchar exitCode() const;

    Q_PROPERTY(QString Features READ features)
    QString features() const;

    Q_PROPERTY(qulonglong FinishTimestamp READ finishTimestamp)
    qulonglong finishTimestamp() const;

    Q_PROPERTY(qulonglong FinishTimestampMonotonic READ finishTimestampMonotonic)
    qulonglong finishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong FirmwareTimestamp READ firmwareTimestamp)
    qulonglong firmwareTimestamp() const;

    Q_PROPERTY(qulonglong FirmwareTimestampMonotonic READ firmwareTimestampMonotonic)
    qulonglong firmwareTimestampMonotonic() const;

    Q_PROPERTY(qulonglong GeneratorsFinishTimestamp READ generatorsFinishTimestamp)
    qulonglong generatorsFinishTimestamp() const;

    Q_PROPERTY(qulonglong GeneratorsFinishTimestampMonotonic READ generatorsFinishTimestampMonotonic)
    qulonglong generatorsFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong GeneratorsStartTimestamp READ generatorsStartTimestamp)
    qulonglong generatorsStartTimestamp() const;

    Q_PROPERTY(qulonglong GeneratorsStartTimestampMonotonic READ generatorsStartTimestampMonotonic)
    qulonglong generatorsStartTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDGeneratorsFinishTimestamp READ initRDGeneratorsFinishTimestamp)
    qulonglong initRDGeneratorsFinishTimestamp() const;

    Q_PROPERTY(qulonglong InitRDGeneratorsFinishTimestampMonotonic READ initRDGeneratorsFinishTimestampMonotonic)
    qulonglong initRDGeneratorsFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDGeneratorsStartTimestamp READ initRDGeneratorsStartTimestamp)
    qulonglong initRDGeneratorsStartTimestamp() const;

    Q_PROPERTY(qulonglong InitRDGeneratorsStartTimestampMonotonic READ initRDGeneratorsStartTimestampMonotonic)
    qulonglong initRDGeneratorsStartTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDSecurityFinishTimestamp READ initRDSecurityFinishTimestamp)
    qulonglong initRDSecurityFinishTimestamp() const;

    Q_PROPERTY(qulonglong InitRDSecurityFinishTimestampMonotonic READ initRDSecurityFinishTimestampMonotonic)
    qulonglong initRDSecurityFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDSecurityStartTimestamp READ initRDSecurityStartTimestamp)
    qulonglong initRDSecurityStartTimestamp() const;

    Q_PROPERTY(qulonglong InitRDSecurityStartTimestampMonotonic READ initRDSecurityStartTimestampMonotonic)
    qulonglong initRDSecurityStartTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDTimestamp READ initRDTimestamp)
    qulonglong initRDTimestamp() const;

    Q_PROPERTY(qulonglong InitRDTimestampMonotonic READ initRDTimestampMonotonic)
    qulonglong initRDTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDUnitsLoadFinishTimestamp READ initRDUnitsLoadFinishTimestamp)
    qulonglong initRDUnitsLoadFinishTimestamp() const;

    Q_PROPERTY(qulonglong InitRDUnitsLoadFinishTimestampMonotonic READ initRDUnitsLoadFinishTimestampMonotonic)
    qulonglong initRDUnitsLoadFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong InitRDUnitsLoadStartTimestamp READ initRDUnitsLoadStartTimestamp)
    qulonglong initRDUnitsLoadStartTimestamp() const;

    Q_PROPERTY(qulonglong InitRDUnitsLoadStartTimestampMonotonic READ initRDUnitsLoadStartTimestampMonotonic)
    qulonglong initRDUnitsLoadStartTimestampMonotonic() const;

    Q_PROPERTY(qulonglong KernelTimestamp READ kernelTimestamp)
    qulonglong kernelTimestamp() const;

    Q_PROPERTY(qulonglong KernelTimestampMonotonic READ kernelTimestampMonotonic)
    qulonglong kernelTimestampMonotonic() const;

    Q_PROPERTY(qulonglong LoaderTimestamp READ loaderTimestamp)
    qulonglong loaderTimestamp() const;

    Q_PROPERTY(qulonglong LoaderTimestampMonotonic READ loaderTimestampMonotonic)
    qulonglong loaderTimestampMonotonic() const;

    Q_PROPERTY(QString LogLevel READ logLevel WRITE setLogLevel)
    QString logLevel() const;
    void setLogLevel(const QString &value);

    Q_PROPERTY(QString LogTarget READ logTarget WRITE setLogTarget)
    QString logTarget() const;
    void setLogTarget(const QString &value);

    Q_PROPERTY(uint NFailedJobs READ nFailedJobs)
    uint nFailedJobs() const;

    Q_PROPERTY(uint NFailedUnits READ nFailedUnits)
    uint nFailedUnits() const;

    Q_PROPERTY(uint NInstalledJobs READ nInstalledJobs)
    uint nInstalledJobs() const;

    Q_PROPERTY(uint NJobs READ nJobs)
    uint nJobs() const;

    Q_PROPERTY(uint NNames READ nNames)
    uint nNames() const;

    Q_PROPERTY(double Progress READ progress)
    double progress() const;

    Q_PROPERTY(qulonglong RuntimeWatchdogUSec READ runtimeWatchdogUSec WRITE setRuntimeWatchdogUSec)
    qulonglong runtimeWatchdogUSec() const;
    void setRuntimeWatchdogUSec(qulonglong value);

    Q_PROPERTY(qulonglong SecurityFinishTimestamp READ securityFinishTimestamp)
    qulonglong securityFinishTimestamp() const;

    Q_PROPERTY(qulonglong SecurityFinishTimestampMonotonic READ securityFinishTimestampMonotonic)
    qulonglong securityFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong SecurityStartTimestamp READ securityStartTimestamp)
    qulonglong securityStartTimestamp() const;

    Q_PROPERTY(qulonglong SecurityStartTimestampMonotonic READ securityStartTimestampMonotonic)
    qulonglong securityStartTimestampMonotonic() const;

    Q_PROPERTY(bool ServiceWatchdogs READ serviceWatchdogs WRITE setServiceWatchdogs)
    bool serviceWatchdogs() const;
    void setServiceWatchdogs(bool value);

    Q_PROPERTY(bool ShowStatus READ showStatus)
    bool showStatus() const;

    Q_PROPERTY(qulonglong ShutdownWatchdogUSec READ shutdownWatchdogUSec WRITE setShutdownWatchdogUSec)
    qulonglong shutdownWatchdogUSec() const;
    void setShutdownWatchdogUSec(qulonglong value);

    Q_PROPERTY(QString SystemState READ systemState)
    QString systemState() const;

    Q_PROPERTY(QString Tainted READ tainted)
    QString tainted() const;

    Q_PROPERTY(qulonglong TimerSlackNSec READ timerSlackNSec)
    qulonglong timerSlackNSec() const;

    Q_PROPERTY(QStringList UnitPath READ unitPath)
    QStringList unitPath() const;

    Q_PROPERTY(qulonglong UnitsLoadFinishTimestamp READ unitsLoadFinishTimestamp)
    qulonglong unitsLoadFinishTimestamp() const;

    Q_PROPERTY(qulonglong UnitsLoadFinishTimestampMonotonic READ unitsLoadFinishTimestampMonotonic)
    qulonglong unitsLoadFinishTimestampMonotonic() const;

    Q_PROPERTY(qulonglong UnitsLoadStartTimestamp READ unitsLoadStartTimestamp)
    qulonglong unitsLoadStartTimestamp() const;

    Q_PROPERTY(qulonglong UnitsLoadStartTimestampMonotonic READ unitsLoadStartTimestampMonotonic)
    qulonglong unitsLoadStartTimestampMonotonic() const;

    Q_PROPERTY(qulonglong UserspaceTimestamp READ userspaceTimestamp)
    qulonglong userspaceTimestamp() const;

    Q_PROPERTY(qulonglong UserspaceTimestampMonotonic READ userspaceTimestampMonotonic)
    qulonglong userspaceTimestampMonotonic() const;

    Q_PROPERTY(QString Version READ version)
    QString version() const;

    Q_PROPERTY(QString Virtualization READ virtualization)
    QString virtualization() const;

public Q_SLOTS: // METHODS
    void AbandonScope(const QString &in0);
    QString Dump();
    QDBusUnixFileDescriptor DumpByFileDescriptor();
    void Exit();
    QDBusObjectPath GetJob(uint in0);
    QDBusObjectPath GetUnit(const QString &in0);
    QDBusObjectPath GetUnitByControlGroup(const QString &in0);
    QDBusObjectPath GetUnitByInvocationID(const QByteArray &in0);
    QDBusObjectPath GetUnitByPID(uint in0);
    QStringList GetUnitFileLinks(const QString &in0, bool in1);
    QString GetUnitFileState(const QString &in0);
    void Halt();
    void KExec();
    void KillUnit(const QString &in0, const QString &in1, int in2);
    QDBusObjectPath LoadUnit(const QString &in0);
    uint LookupDynamicUserByName(const QString &in0);
    QString LookupDynamicUserByUID(uint in0);
    StringStructList MaskUnitFiles(const QStringList &in0, bool in1, bool in2);
    void PowerOff();
    void Reboot();
    void Reexecute();
    void RefUnit(const QString &in0);
    void Reload();
    QDBusObjectPath ReloadOrRestartUnit(const QString &in0, const QString &in1);
    QDBusObjectPath ReloadOrTryRestartUnit(const QString &in0, const QString &in1);
    QDBusObjectPath ReloadUnit(const QString &in0, const QString &in1);
    void ResetFailedUnit(const QString &in0);
    QDBusObjectPath RestartUnit(const QString &in0, const QString &in1);
    void SetEnvironment(const QStringList &in0);
    void SetExitCode(uchar in0);
    QDBusObjectPath StartUnit(const QString &in0, const QString &in1);
    QDBusObjectPath StartUnitReplace(const QString &in0, const QString &in1, const QString &in2);
    QDBusObjectPath StopUnit(const QString &in0, const QString &in1);
    void Subscribe();
    void SwitchRoot(const QString &in0, const QString &in1);
    QDBusObjectPath TryRestartUnit(const QString &in0, const QString &in1);
    StringStructList UnmaskUnitFiles(const QStringList &in0, bool in1);
    void UnrefUnit(const QString &in0);
    void UnsetAndSetEnvironment(const QStringList &in0, const QStringList &in1);
    void UnsetEnvironment(const QStringList &in0);
    void Unsubscribe();
Q_SIGNALS: // SIGNALS
    void JobNew(uint in0, const QDBusObjectPath &in1, const QString &in2);
    void JobRemoved(uint in0, const QDBusObjectPath &in1, const QString &in2, const QString &in3);
    void Reloading(bool in0);
    void StartupFinished(qulonglong in0, qulonglong in1, qulonglong in2, qulonglong in3, qulonglong in4, qulonglong in5);
    void UnitFilesChanged();
    void UnitNew(const QString &in0, const QDBusObjectPath &in1);
    void UnitRemoved(const QString &in0, const QDBusObjectPath &in1);
};

#endif
