/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-session/dbus/interface/org.freedesktop.login1.User.xml -a ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.UserAdaptor -i ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.User.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ORG_FREEDESKTOP_LOGIN1_USERADAPTOR_H
#define ORG_FREEDESKTOP_LOGIN1_USERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.User.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.freedesktop.login1.User
 */
class UserAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.login1.User")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.login1.User\">\n"
"    <property access=\"read\" type=\"u\" name=\"UID\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"GID\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Name\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"Timestamp\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"t\" name=\"TimestampMonotonic\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"RuntimePath\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Service\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Slice\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"(so)\" name=\"Display\">\n"
"      <annotation value=\"SessionPath\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"State\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"a(so)\" name=\"Sessions\">\n"
"      <annotation value=\"SessionPathList\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"b\" name=\"IdleHint\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"IdleSinceHint\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"IdleSinceHintMonotonic\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"Linger\">\n"
"      <annotation value=\"false\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <method name=\"Terminate\"/>\n"
"    <method name=\"Kill\">\n"
"      <arg direction=\"in\" type=\"i\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    UserAdaptor(QObject *parent);
    virtual ~UserAdaptor();

public: // PROPERTIES
    Q_PROPERTY(SessionPath Display READ display)
    SessionPath display() const;

    Q_PROPERTY(uint GID READ gID)
    uint gID() const;

    Q_PROPERTY(bool IdleHint READ idleHint)
    bool idleHint() const;

    Q_PROPERTY(qulonglong IdleSinceHint READ idleSinceHint)
    qulonglong idleSinceHint() const;

    Q_PROPERTY(qulonglong IdleSinceHintMonotonic READ idleSinceHintMonotonic)
    qulonglong idleSinceHintMonotonic() const;

    Q_PROPERTY(bool Linger READ linger)
    bool linger() const;

    Q_PROPERTY(QString Name READ name)
    QString name() const;

    Q_PROPERTY(QString RuntimePath READ runtimePath)
    QString runtimePath() const;

    Q_PROPERTY(QString Service READ service)
    QString service() const;

    Q_PROPERTY(SessionPathList Sessions READ sessions)
    SessionPathList sessions() const;

    Q_PROPERTY(QString Slice READ slice)
    QString slice() const;

    Q_PROPERTY(QString State READ state)
    QString state() const;

    Q_PROPERTY(qulonglong Timestamp READ timestamp)
    qulonglong timestamp() const;

    Q_PROPERTY(qulonglong TimestampMonotonic READ timestampMonotonic)
    qulonglong timestampMonotonic() const;

    Q_PROPERTY(uint UID READ uID)
    uint uID() const;

public Q_SLOTS: // METHODS
    void Kill(int in0);
    void Terminate();
Q_SIGNALS: // SIGNALS
};

#endif
