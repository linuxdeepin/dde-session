/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-session/dbus/interface/org.freedesktop.systemd1.Manager.xml -a ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.ManagerAdaptor -i ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.Manager.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.systemd1.ManagerAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ManagerAdaptor
 */

ManagerAdaptor::ManagerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ManagerAdaptor::~ManagerAdaptor()
{
    // destructor
}

QString ManagerAdaptor::architecture() const
{
    // get the value of property Architecture
    return qvariant_cast< QString >(parent()->property("Architecture"));
}

bool ManagerAdaptor::confirmSpawn() const
{
    // get the value of property ConfirmSpawn
    return qvariant_cast< bool >(parent()->property("ConfirmSpawn"));
}

QString ManagerAdaptor::controlGroup() const
{
    // get the value of property ControlGroup
    return qvariant_cast< QString >(parent()->property("ControlGroup"));
}

bool ManagerAdaptor::defaultBlockIOAccounting() const
{
    // get the value of property DefaultBlockIOAccounting
    return qvariant_cast< bool >(parent()->property("DefaultBlockIOAccounting"));
}

bool ManagerAdaptor::defaultCPUAccounting() const
{
    // get the value of property DefaultCPUAccounting
    return qvariant_cast< bool >(parent()->property("DefaultCPUAccounting"));
}

qulonglong ManagerAdaptor::defaultLimitAS() const
{
    // get the value of property DefaultLimitAS
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitAS"));
}

qulonglong ManagerAdaptor::defaultLimitASSoft() const
{
    // get the value of property DefaultLimitASSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitASSoft"));
}

qulonglong ManagerAdaptor::defaultLimitCORE() const
{
    // get the value of property DefaultLimitCORE
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitCORE"));
}

qulonglong ManagerAdaptor::defaultLimitCORESoft() const
{
    // get the value of property DefaultLimitCORESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitCORESoft"));
}

qulonglong ManagerAdaptor::defaultLimitCPU() const
{
    // get the value of property DefaultLimitCPU
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitCPU"));
}

qulonglong ManagerAdaptor::defaultLimitCPUSoft() const
{
    // get the value of property DefaultLimitCPUSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitCPUSoft"));
}

qulonglong ManagerAdaptor::defaultLimitDATA() const
{
    // get the value of property DefaultLimitDATA
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitDATA"));
}

qulonglong ManagerAdaptor::defaultLimitDATASoft() const
{
    // get the value of property DefaultLimitDATASoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitDATASoft"));
}

qulonglong ManagerAdaptor::defaultLimitFSIZE() const
{
    // get the value of property DefaultLimitFSIZE
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitFSIZE"));
}

qulonglong ManagerAdaptor::defaultLimitFSIZESoft() const
{
    // get the value of property DefaultLimitFSIZESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitFSIZESoft"));
}

qulonglong ManagerAdaptor::defaultLimitLOCKS() const
{
    // get the value of property DefaultLimitLOCKS
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitLOCKS"));
}

qulonglong ManagerAdaptor::defaultLimitLOCKSSoft() const
{
    // get the value of property DefaultLimitLOCKSSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitLOCKSSoft"));
}

qulonglong ManagerAdaptor::defaultLimitMEMLOCK() const
{
    // get the value of property DefaultLimitMEMLOCK
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitMEMLOCK"));
}

qulonglong ManagerAdaptor::defaultLimitMEMLOCKSoft() const
{
    // get the value of property DefaultLimitMEMLOCKSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitMEMLOCKSoft"));
}

qulonglong ManagerAdaptor::defaultLimitMSGQUEUE() const
{
    // get the value of property DefaultLimitMSGQUEUE
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitMSGQUEUE"));
}

qulonglong ManagerAdaptor::defaultLimitMSGQUEUESoft() const
{
    // get the value of property DefaultLimitMSGQUEUESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitMSGQUEUESoft"));
}

qulonglong ManagerAdaptor::defaultLimitNICE() const
{
    // get the value of property DefaultLimitNICE
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNICE"));
}

qulonglong ManagerAdaptor::defaultLimitNICESoft() const
{
    // get the value of property DefaultLimitNICESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNICESoft"));
}

qulonglong ManagerAdaptor::defaultLimitNOFILE() const
{
    // get the value of property DefaultLimitNOFILE
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNOFILE"));
}

qulonglong ManagerAdaptor::defaultLimitNOFILESoft() const
{
    // get the value of property DefaultLimitNOFILESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNOFILESoft"));
}

qulonglong ManagerAdaptor::defaultLimitNPROC() const
{
    // get the value of property DefaultLimitNPROC
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNPROC"));
}

qulonglong ManagerAdaptor::defaultLimitNPROCSoft() const
{
    // get the value of property DefaultLimitNPROCSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitNPROCSoft"));
}

qulonglong ManagerAdaptor::defaultLimitRSS() const
{
    // get the value of property DefaultLimitRSS
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRSS"));
}

qulonglong ManagerAdaptor::defaultLimitRSSSoft() const
{
    // get the value of property DefaultLimitRSSSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRSSSoft"));
}

qulonglong ManagerAdaptor::defaultLimitRTPRIO() const
{
    // get the value of property DefaultLimitRTPRIO
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRTPRIO"));
}

qulonglong ManagerAdaptor::defaultLimitRTPRIOSoft() const
{
    // get the value of property DefaultLimitRTPRIOSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRTPRIOSoft"));
}

qulonglong ManagerAdaptor::defaultLimitRTTIME() const
{
    // get the value of property DefaultLimitRTTIME
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRTTIME"));
}

qulonglong ManagerAdaptor::defaultLimitRTTIMESoft() const
{
    // get the value of property DefaultLimitRTTIMESoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitRTTIMESoft"));
}

qulonglong ManagerAdaptor::defaultLimitSIGPENDING() const
{
    // get the value of property DefaultLimitSIGPENDING
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitSIGPENDING"));
}

qulonglong ManagerAdaptor::defaultLimitSIGPENDINGSoft() const
{
    // get the value of property DefaultLimitSIGPENDINGSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitSIGPENDINGSoft"));
}

qulonglong ManagerAdaptor::defaultLimitSTACK() const
{
    // get the value of property DefaultLimitSTACK
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitSTACK"));
}

qulonglong ManagerAdaptor::defaultLimitSTACKSoft() const
{
    // get the value of property DefaultLimitSTACKSoft
    return qvariant_cast< qulonglong >(parent()->property("DefaultLimitSTACKSoft"));
}

bool ManagerAdaptor::defaultMemoryAccounting() const
{
    // get the value of property DefaultMemoryAccounting
    return qvariant_cast< bool >(parent()->property("DefaultMemoryAccounting"));
}

qulonglong ManagerAdaptor::defaultRestartUSec() const
{
    // get the value of property DefaultRestartUSec
    return qvariant_cast< qulonglong >(parent()->property("DefaultRestartUSec"));
}

QString ManagerAdaptor::defaultStandardError() const
{
    // get the value of property DefaultStandardError
    return qvariant_cast< QString >(parent()->property("DefaultStandardError"));
}

QString ManagerAdaptor::defaultStandardOutput() const
{
    // get the value of property DefaultStandardOutput
    return qvariant_cast< QString >(parent()->property("DefaultStandardOutput"));
}

uint ManagerAdaptor::defaultStartLimitBurst() const
{
    // get the value of property DefaultStartLimitBurst
    return qvariant_cast< uint >(parent()->property("DefaultStartLimitBurst"));
}

qulonglong ManagerAdaptor::defaultStartLimitIntervalUSec() const
{
    // get the value of property DefaultStartLimitIntervalUSec
    return qvariant_cast< qulonglong >(parent()->property("DefaultStartLimitIntervalUSec"));
}

bool ManagerAdaptor::defaultTasksAccounting() const
{
    // get the value of property DefaultTasksAccounting
    return qvariant_cast< bool >(parent()->property("DefaultTasksAccounting"));
}

qulonglong ManagerAdaptor::defaultTasksMax() const
{
    // get the value of property DefaultTasksMax
    return qvariant_cast< qulonglong >(parent()->property("DefaultTasksMax"));
}

qulonglong ManagerAdaptor::defaultTimeoutStartUSec() const
{
    // get the value of property DefaultTimeoutStartUSec
    return qvariant_cast< qulonglong >(parent()->property("DefaultTimeoutStartUSec"));
}

qulonglong ManagerAdaptor::defaultTimeoutStopUSec() const
{
    // get the value of property DefaultTimeoutStopUSec
    return qvariant_cast< qulonglong >(parent()->property("DefaultTimeoutStopUSec"));
}

qulonglong ManagerAdaptor::defaultTimerAccuracyUSec() const
{
    // get the value of property DefaultTimerAccuracyUSec
    return qvariant_cast< qulonglong >(parent()->property("DefaultTimerAccuracyUSec"));
}

QStringList ManagerAdaptor::environment() const
{
    // get the value of property Environment
    return qvariant_cast< QStringList >(parent()->property("Environment"));
}

uchar ManagerAdaptor::exitCode() const
{
    // get the value of property ExitCode
    return qvariant_cast< uchar >(parent()->property("ExitCode"));
}

QString ManagerAdaptor::features() const
{
    // get the value of property Features
    return qvariant_cast< QString >(parent()->property("Features"));
}

qulonglong ManagerAdaptor::finishTimestamp() const
{
    // get the value of property FinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("FinishTimestamp"));
}

qulonglong ManagerAdaptor::finishTimestampMonotonic() const
{
    // get the value of property FinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("FinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::firmwareTimestamp() const
{
    // get the value of property FirmwareTimestamp
    return qvariant_cast< qulonglong >(parent()->property("FirmwareTimestamp"));
}

qulonglong ManagerAdaptor::firmwareTimestampMonotonic() const
{
    // get the value of property FirmwareTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("FirmwareTimestampMonotonic"));
}

qulonglong ManagerAdaptor::generatorsFinishTimestamp() const
{
    // get the value of property GeneratorsFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("GeneratorsFinishTimestamp"));
}

qulonglong ManagerAdaptor::generatorsFinishTimestampMonotonic() const
{
    // get the value of property GeneratorsFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("GeneratorsFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::generatorsStartTimestamp() const
{
    // get the value of property GeneratorsStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("GeneratorsStartTimestamp"));
}

qulonglong ManagerAdaptor::generatorsStartTimestampMonotonic() const
{
    // get the value of property GeneratorsStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("GeneratorsStartTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDGeneratorsFinishTimestamp() const
{
    // get the value of property InitRDGeneratorsFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDGeneratorsFinishTimestamp"));
}

qulonglong ManagerAdaptor::initRDGeneratorsFinishTimestampMonotonic() const
{
    // get the value of property InitRDGeneratorsFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDGeneratorsFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDGeneratorsStartTimestamp() const
{
    // get the value of property InitRDGeneratorsStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDGeneratorsStartTimestamp"));
}

qulonglong ManagerAdaptor::initRDGeneratorsStartTimestampMonotonic() const
{
    // get the value of property InitRDGeneratorsStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDGeneratorsStartTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDSecurityFinishTimestamp() const
{
    // get the value of property InitRDSecurityFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDSecurityFinishTimestamp"));
}

qulonglong ManagerAdaptor::initRDSecurityFinishTimestampMonotonic() const
{
    // get the value of property InitRDSecurityFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDSecurityFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDSecurityStartTimestamp() const
{
    // get the value of property InitRDSecurityStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDSecurityStartTimestamp"));
}

qulonglong ManagerAdaptor::initRDSecurityStartTimestampMonotonic() const
{
    // get the value of property InitRDSecurityStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDSecurityStartTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDTimestamp() const
{
    // get the value of property InitRDTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDTimestamp"));
}

qulonglong ManagerAdaptor::initRDTimestampMonotonic() const
{
    // get the value of property InitRDTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDUnitsLoadFinishTimestamp() const
{
    // get the value of property InitRDUnitsLoadFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDUnitsLoadFinishTimestamp"));
}

qulonglong ManagerAdaptor::initRDUnitsLoadFinishTimestampMonotonic() const
{
    // get the value of property InitRDUnitsLoadFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDUnitsLoadFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::initRDUnitsLoadStartTimestamp() const
{
    // get the value of property InitRDUnitsLoadStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("InitRDUnitsLoadStartTimestamp"));
}

qulonglong ManagerAdaptor::initRDUnitsLoadStartTimestampMonotonic() const
{
    // get the value of property InitRDUnitsLoadStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("InitRDUnitsLoadStartTimestampMonotonic"));
}

qulonglong ManagerAdaptor::kernelTimestamp() const
{
    // get the value of property KernelTimestamp
    return qvariant_cast< qulonglong >(parent()->property("KernelTimestamp"));
}

qulonglong ManagerAdaptor::kernelTimestampMonotonic() const
{
    // get the value of property KernelTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("KernelTimestampMonotonic"));
}

qulonglong ManagerAdaptor::loaderTimestamp() const
{
    // get the value of property LoaderTimestamp
    return qvariant_cast< qulonglong >(parent()->property("LoaderTimestamp"));
}

qulonglong ManagerAdaptor::loaderTimestampMonotonic() const
{
    // get the value of property LoaderTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("LoaderTimestampMonotonic"));
}

QString ManagerAdaptor::logLevel() const
{
    // get the value of property LogLevel
    return qvariant_cast< QString >(parent()->property("LogLevel"));
}

void ManagerAdaptor::setLogLevel(const QString &value)
{
    // set the value of property LogLevel
    parent()->setProperty("LogLevel", QVariant::fromValue(value));
}

QString ManagerAdaptor::logTarget() const
{
    // get the value of property LogTarget
    return qvariant_cast< QString >(parent()->property("LogTarget"));
}

void ManagerAdaptor::setLogTarget(const QString &value)
{
    // set the value of property LogTarget
    parent()->setProperty("LogTarget", QVariant::fromValue(value));
}

uint ManagerAdaptor::nFailedJobs() const
{
    // get the value of property NFailedJobs
    return qvariant_cast< uint >(parent()->property("NFailedJobs"));
}

uint ManagerAdaptor::nFailedUnits() const
{
    // get the value of property NFailedUnits
    return qvariant_cast< uint >(parent()->property("NFailedUnits"));
}

uint ManagerAdaptor::nInstalledJobs() const
{
    // get the value of property NInstalledJobs
    return qvariant_cast< uint >(parent()->property("NInstalledJobs"));
}

uint ManagerAdaptor::nJobs() const
{
    // get the value of property NJobs
    return qvariant_cast< uint >(parent()->property("NJobs"));
}

uint ManagerAdaptor::nNames() const
{
    // get the value of property NNames
    return qvariant_cast< uint >(parent()->property("NNames"));
}

double ManagerAdaptor::progress() const
{
    // get the value of property Progress
    return qvariant_cast< double >(parent()->property("Progress"));
}

qulonglong ManagerAdaptor::runtimeWatchdogUSec() const
{
    // get the value of property RuntimeWatchdogUSec
    return qvariant_cast< qulonglong >(parent()->property("RuntimeWatchdogUSec"));
}

void ManagerAdaptor::setRuntimeWatchdogUSec(qulonglong value)
{
    // set the value of property RuntimeWatchdogUSec
    parent()->setProperty("RuntimeWatchdogUSec", QVariant::fromValue(value));
}

qulonglong ManagerAdaptor::securityFinishTimestamp() const
{
    // get the value of property SecurityFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("SecurityFinishTimestamp"));
}

qulonglong ManagerAdaptor::securityFinishTimestampMonotonic() const
{
    // get the value of property SecurityFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("SecurityFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::securityStartTimestamp() const
{
    // get the value of property SecurityStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("SecurityStartTimestamp"));
}

qulonglong ManagerAdaptor::securityStartTimestampMonotonic() const
{
    // get the value of property SecurityStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("SecurityStartTimestampMonotonic"));
}

bool ManagerAdaptor::serviceWatchdogs() const
{
    // get the value of property ServiceWatchdogs
    return qvariant_cast< bool >(parent()->property("ServiceWatchdogs"));
}

void ManagerAdaptor::setServiceWatchdogs(bool value)
{
    // set the value of property ServiceWatchdogs
    parent()->setProperty("ServiceWatchdogs", QVariant::fromValue(value));
}

bool ManagerAdaptor::showStatus() const
{
    // get the value of property ShowStatus
    return qvariant_cast< bool >(parent()->property("ShowStatus"));
}

qulonglong ManagerAdaptor::shutdownWatchdogUSec() const
{
    // get the value of property ShutdownWatchdogUSec
    return qvariant_cast< qulonglong >(parent()->property("ShutdownWatchdogUSec"));
}

void ManagerAdaptor::setShutdownWatchdogUSec(qulonglong value)
{
    // set the value of property ShutdownWatchdogUSec
    parent()->setProperty("ShutdownWatchdogUSec", QVariant::fromValue(value));
}

QString ManagerAdaptor::systemState() const
{
    // get the value of property SystemState
    return qvariant_cast< QString >(parent()->property("SystemState"));
}

QString ManagerAdaptor::tainted() const
{
    // get the value of property Tainted
    return qvariant_cast< QString >(parent()->property("Tainted"));
}

qulonglong ManagerAdaptor::timerSlackNSec() const
{
    // get the value of property TimerSlackNSec
    return qvariant_cast< qulonglong >(parent()->property("TimerSlackNSec"));
}

QStringList ManagerAdaptor::unitPath() const
{
    // get the value of property UnitPath
    return qvariant_cast< QStringList >(parent()->property("UnitPath"));
}

qulonglong ManagerAdaptor::unitsLoadFinishTimestamp() const
{
    // get the value of property UnitsLoadFinishTimestamp
    return qvariant_cast< qulonglong >(parent()->property("UnitsLoadFinishTimestamp"));
}

qulonglong ManagerAdaptor::unitsLoadFinishTimestampMonotonic() const
{
    // get the value of property UnitsLoadFinishTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("UnitsLoadFinishTimestampMonotonic"));
}

qulonglong ManagerAdaptor::unitsLoadStartTimestamp() const
{
    // get the value of property UnitsLoadStartTimestamp
    return qvariant_cast< qulonglong >(parent()->property("UnitsLoadStartTimestamp"));
}

qulonglong ManagerAdaptor::unitsLoadStartTimestampMonotonic() const
{
    // get the value of property UnitsLoadStartTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("UnitsLoadStartTimestampMonotonic"));
}

qulonglong ManagerAdaptor::userspaceTimestamp() const
{
    // get the value of property UserspaceTimestamp
    return qvariant_cast< qulonglong >(parent()->property("UserspaceTimestamp"));
}

qulonglong ManagerAdaptor::userspaceTimestampMonotonic() const
{
    // get the value of property UserspaceTimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("UserspaceTimestampMonotonic"));
}

QString ManagerAdaptor::version() const
{
    // get the value of property Version
    return qvariant_cast< QString >(parent()->property("Version"));
}

QString ManagerAdaptor::virtualization() const
{
    // get the value of property Virtualization
    return qvariant_cast< QString >(parent()->property("Virtualization"));
}

void ManagerAdaptor::AbandonScope(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.AbandonScope
    QMetaObject::invokeMethod(parent(), "AbandonScope", Q_ARG(QString, in0));
}

QString ManagerAdaptor::Dump()
{
    // handle method call org.freedesktop.systemd1.Manager.Dump
    QString out0;
    QMetaObject::invokeMethod(parent(), "Dump", Q_RETURN_ARG(QString, out0));
    return out0;
}

QDBusUnixFileDescriptor ManagerAdaptor::DumpByFileDescriptor()
{
    // handle method call org.freedesktop.systemd1.Manager.DumpByFileDescriptor
    QDBusUnixFileDescriptor out0;
    QMetaObject::invokeMethod(parent(), "DumpByFileDescriptor", Q_RETURN_ARG(QDBusUnixFileDescriptor, out0));
    return out0;
}

void ManagerAdaptor::Exit()
{
    // handle method call org.freedesktop.systemd1.Manager.Exit
    QMetaObject::invokeMethod(parent(), "Exit");
}

QDBusObjectPath ManagerAdaptor::GetJob(uint in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetJob
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "GetJob", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(uint, in0));
    return out0;
}

QDBusObjectPath ManagerAdaptor::GetUnit(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "GetUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0));
    return out0;
}

QDBusObjectPath ManagerAdaptor::GetUnitByControlGroup(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnitByControlGroup
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "GetUnitByControlGroup", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0));
    return out0;
}

QDBusObjectPath ManagerAdaptor::GetUnitByInvocationID(const QByteArray &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnitByInvocationID
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "GetUnitByInvocationID", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QByteArray, in0));
    return out0;
}

QDBusObjectPath ManagerAdaptor::GetUnitByPID(uint in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnitByPID
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "GetUnitByPID", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(uint, in0));
    return out0;
}

QStringList ManagerAdaptor::GetUnitFileLinks(const QString &in0, bool in1)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnitFileLinks
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "GetUnitFileLinks", Q_RETURN_ARG(QStringList, out0), Q_ARG(QString, in0), Q_ARG(bool, in1));
    return out0;
}

QString ManagerAdaptor::GetUnitFileState(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.GetUnitFileState
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetUnitFileState", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0));
    return out0;
}

void ManagerAdaptor::Halt()
{
    // handle method call org.freedesktop.systemd1.Manager.Halt
    QMetaObject::invokeMethod(parent(), "Halt");
}

void ManagerAdaptor::KExec()
{
    // handle method call org.freedesktop.systemd1.Manager.KExec
    QMetaObject::invokeMethod(parent(), "KExec");
}

void ManagerAdaptor::KillUnit(const QString &in0, const QString &in1, int in2)
{
    // handle method call org.freedesktop.systemd1.Manager.KillUnit
    QMetaObject::invokeMethod(parent(), "KillUnit", Q_ARG(QString, in0), Q_ARG(QString, in1), Q_ARG(int, in2));
}

QDBusObjectPath ManagerAdaptor::LoadUnit(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.LoadUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "LoadUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0));
    return out0;
}

uint ManagerAdaptor::LookupDynamicUserByName(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.LookupDynamicUserByName
    uint out0;
    QMetaObject::invokeMethod(parent(), "LookupDynamicUserByName", Q_RETURN_ARG(uint, out0), Q_ARG(QString, in0));
    return out0;
}

QString ManagerAdaptor::LookupDynamicUserByUID(uint in0)
{
    // handle method call org.freedesktop.systemd1.Manager.LookupDynamicUserByUID
    QString out0;
    QMetaObject::invokeMethod(parent(), "LookupDynamicUserByUID", Q_RETURN_ARG(QString, out0), Q_ARG(uint, in0));
    return out0;
}

StringStructList ManagerAdaptor::MaskUnitFiles(const QStringList &in0, bool in1, bool in2)
{
    // handle method call org.freedesktop.systemd1.Manager.MaskUnitFiles
    StringStructList out0;
    QMetaObject::invokeMethod(parent(), "MaskUnitFiles", Q_RETURN_ARG(StringStructList, out0), Q_ARG(QStringList, in0), Q_ARG(bool, in1), Q_ARG(bool, in2));
    return out0;
}

void ManagerAdaptor::PowerOff()
{
    // handle method call org.freedesktop.systemd1.Manager.PowerOff
    QMetaObject::invokeMethod(parent(), "PowerOff");
}

void ManagerAdaptor::Reboot()
{
    // handle method call org.freedesktop.systemd1.Manager.Reboot
    QMetaObject::invokeMethod(parent(), "Reboot");
}

void ManagerAdaptor::Reexecute()
{
    // handle method call org.freedesktop.systemd1.Manager.Reexecute
    QMetaObject::invokeMethod(parent(), "Reexecute");
}

void ManagerAdaptor::RefUnit(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.RefUnit
    QMetaObject::invokeMethod(parent(), "RefUnit", Q_ARG(QString, in0));
}

void ManagerAdaptor::Reload()
{
    // handle method call org.freedesktop.systemd1.Manager.Reload
    QMetaObject::invokeMethod(parent(), "Reload");
}

QDBusObjectPath ManagerAdaptor::ReloadOrRestartUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.ReloadOrRestartUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "ReloadOrRestartUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

QDBusObjectPath ManagerAdaptor::ReloadOrTryRestartUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.ReloadOrTryRestartUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "ReloadOrTryRestartUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

QDBusObjectPath ManagerAdaptor::ReloadUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.ReloadUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "ReloadUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

void ManagerAdaptor::ResetFailedUnit(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.ResetFailedUnit
    QMetaObject::invokeMethod(parent(), "ResetFailedUnit", Q_ARG(QString, in0));
}

QDBusObjectPath ManagerAdaptor::RestartUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.RestartUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "RestartUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

void ManagerAdaptor::SetEnvironment(const QStringList &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.SetEnvironment
    QMetaObject::invokeMethod(parent(), "SetEnvironment", Q_ARG(QStringList, in0));
}

void ManagerAdaptor::SetExitCode(uchar in0)
{
    // handle method call org.freedesktop.systemd1.Manager.SetExitCode
    QMetaObject::invokeMethod(parent(), "SetExitCode", Q_ARG(uchar, in0));
}

QDBusObjectPath ManagerAdaptor::StartUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.StartUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "StartUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

QDBusObjectPath ManagerAdaptor::StartUnitReplace(const QString &in0, const QString &in1, const QString &in2)
{
    // handle method call org.freedesktop.systemd1.Manager.StartUnitReplace
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "StartUnitReplace", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1), Q_ARG(QString, in2));
    return out0;
}

QDBusObjectPath ManagerAdaptor::StopUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.StopUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "StopUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

void ManagerAdaptor::Subscribe()
{
    // handle method call org.freedesktop.systemd1.Manager.Subscribe
    QMetaObject::invokeMethod(parent(), "Subscribe");
}

void ManagerAdaptor::SwitchRoot(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.SwitchRoot
    QMetaObject::invokeMethod(parent(), "SwitchRoot", Q_ARG(QString, in0), Q_ARG(QString, in1));
}

QDBusObjectPath ManagerAdaptor::TryRestartUnit(const QString &in0, const QString &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.TryRestartUnit
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "TryRestartUnit", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

StringStructList ManagerAdaptor::UnmaskUnitFiles(const QStringList &in0, bool in1)
{
    // handle method call org.freedesktop.systemd1.Manager.UnmaskUnitFiles
    StringStructList out0;
    QMetaObject::invokeMethod(parent(), "UnmaskUnitFiles", Q_RETURN_ARG(StringStructList, out0), Q_ARG(QStringList, in0), Q_ARG(bool, in1));
    return out0;
}

void ManagerAdaptor::UnrefUnit(const QString &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.UnrefUnit
    QMetaObject::invokeMethod(parent(), "UnrefUnit", Q_ARG(QString, in0));
}

void ManagerAdaptor::UnsetAndSetEnvironment(const QStringList &in0, const QStringList &in1)
{
    // handle method call org.freedesktop.systemd1.Manager.UnsetAndSetEnvironment
    QMetaObject::invokeMethod(parent(), "UnsetAndSetEnvironment", Q_ARG(QStringList, in0), Q_ARG(QStringList, in1));
}

void ManagerAdaptor::UnsetEnvironment(const QStringList &in0)
{
    // handle method call org.freedesktop.systemd1.Manager.UnsetEnvironment
    QMetaObject::invokeMethod(parent(), "UnsetEnvironment", Q_ARG(QStringList, in0));
}

void ManagerAdaptor::Unsubscribe()
{
    // handle method call org.freedesktop.systemd1.Manager.Unsubscribe
    QMetaObject::invokeMethod(parent(), "Unsubscribe");
}

