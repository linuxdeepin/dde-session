/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-session/dbus/interface/org.freedesktop.login1.User.xml -a ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.UserAdaptor -i ./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.User.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-session/toolGenerate/qdbusxml2cpp/org.freedesktop.login1.UserAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class UserAdaptor
 */

UserAdaptor::UserAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

UserAdaptor::~UserAdaptor()
{
    // destructor
}

SessionPath UserAdaptor::display() const
{
    // get the value of property Display
    return qvariant_cast< SessionPath >(parent()->property("Display"));
}

uint UserAdaptor::gID() const
{
    // get the value of property GID
    return qvariant_cast< uint >(parent()->property("GID"));
}

bool UserAdaptor::idleHint() const
{
    // get the value of property IdleHint
    return qvariant_cast< bool >(parent()->property("IdleHint"));
}

qulonglong UserAdaptor::idleSinceHint() const
{
    // get the value of property IdleSinceHint
    return qvariant_cast< qulonglong >(parent()->property("IdleSinceHint"));
}

qulonglong UserAdaptor::idleSinceHintMonotonic() const
{
    // get the value of property IdleSinceHintMonotonic
    return qvariant_cast< qulonglong >(parent()->property("IdleSinceHintMonotonic"));
}

bool UserAdaptor::linger() const
{
    // get the value of property Linger
    return qvariant_cast< bool >(parent()->property("Linger"));
}

QString UserAdaptor::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

QString UserAdaptor::runtimePath() const
{
    // get the value of property RuntimePath
    return qvariant_cast< QString >(parent()->property("RuntimePath"));
}

QString UserAdaptor::service() const
{
    // get the value of property Service
    return qvariant_cast< QString >(parent()->property("Service"));
}

SessionPathList UserAdaptor::sessions() const
{
    // get the value of property Sessions
    return qvariant_cast< SessionPathList >(parent()->property("Sessions"));
}

QString UserAdaptor::slice() const
{
    // get the value of property Slice
    return qvariant_cast< QString >(parent()->property("Slice"));
}

QString UserAdaptor::state() const
{
    // get the value of property State
    return qvariant_cast< QString >(parent()->property("State"));
}

qulonglong UserAdaptor::timestamp() const
{
    // get the value of property Timestamp
    return qvariant_cast< qulonglong >(parent()->property("Timestamp"));
}

qulonglong UserAdaptor::timestampMonotonic() const
{
    // get the value of property TimestampMonotonic
    return qvariant_cast< qulonglong >(parent()->property("TimestampMonotonic"));
}

uint UserAdaptor::uID() const
{
    // get the value of property UID
    return qvariant_cast< uint >(parent()->property("UID"));
}

void UserAdaptor::Kill(int in0)
{
    // handle method call org.freedesktop.login1.User.Kill
    QMetaObject::invokeMethod(parent(), "Kill", Q_ARG(int, in0));
}

void UserAdaptor::Terminate()
{
    // handle method call org.freedesktop.login1.User.Terminate
    QMetaObject::invokeMethod(parent(), "Terminate");
}

